#!/usr/bin/env python3
import boto3
import inquirer

from botocore.client import BaseClient
from pathlib import Path
from subprocess import run


def get_running(ec2_list: list[dict]) -> list[dict]:
    return [
        host
        for host in ec2_list if host.get("State", {}).get("Name", "") == "running"
    ]


def get_tags_as_dict(tags_list: list[dict]) -> dict:
    return {
        element["Key"]: element["Value"]
        for element in tags_list
    }


def is_key_value_in_instance(instance: dict, key: str, value: str) -> bool:
    tags = get_tags_as_dict(instance["Tags"])
    if tags.get(key) == value:
        return True
    else:
        return False


def ips_in_instance(instance: dict) -> list[str]:
    return [
        ip["PrivateIpAddress"]
        for interface in instance["NetworkInterfaces"]
        for ip in interface["PrivateIpAddresses"]
    ]


def get_bastion(instance: dict) -> dict:
    tags = get_tags_as_dict(instance["Tags"])
    return {tags["Name"]: instance["PublicIpAddress"]}


def get_bastions(ec2_list: list[dict], key: str, value: str) -> dict:
    return {
        k: v
        for host in ec2_list if is_key_value_in_instance(instance=host, key=key, value=value)
        for k, v in get_bastion(host).items()
    }


def get_all_ips(ec2_list: list[dict], key: str, value: str) -> list[str]:
    return [
        ip
        for host in ec2_list if is_key_value_in_instance(instance=host, key=key, value=value)
        for ip in ips_in_instance(host)
    ]


def get_all_ec2_instances(client_ec2: BaseClient):
    return [
        host
        for page in client_ec2.get_paginator("describe_instances").paginate()
        for reservations in page["Reservations"]
        for host in reservations["Instances"]
    ]


known_ssh_users = sorted(["ubuntu", "ec2-user", "centos", "admin", "core", "fedora", "root", "bitnami"])
ec2_client = boto3.client('ec2')

ec2_instances = get_all_ec2_instances(client_ec2=ec2_client)

unique_tags = dict()
for instance in ec2_instances:
    for tag in instance["Tags"]:
        if tag["Key"] in unique_tags.keys():
            unique_tags[tag["Key"]].add(tag["Value"])
        else:
            unique_tags[tag["Key"]] = {tag["Value"]}

sorted_tag_keys = sorted(unique_tags.keys())

tag_key_questions = [
    inquirer.List(
        "bastion",
        message="What tag_key should I use to find bastions?",
        choices=sorted_tag_keys
    ),
    inquirer.List(
        "hosts",
        message="What tag_key should I use to find instances?",
        choices=sorted_tag_keys
    )
]

tag_key = inquirer.prompt(tag_key_questions)

tag_value_questions = [
    inquirer.List(
        "bastion",
        message=f"What {tag_key['bastion']} value should I use to find bastions?",
        choices=sorted(unique_tags[tag_key["bastion"]])
    ),
    inquirer.List(
        "hosts",
        message=f"What {tag_key['hosts']} value should I use to find instances?",
        choices=sorted(unique_tags[tag_key["hosts"]])
    )
]

tag_value = inquirer.prompt(tag_value_questions)

running_instances = get_running(ec2_list=ec2_instances)
bastions = get_bastions(ec2_list=running_instances, key=tag_key["bastion"], value=tag_value["bastion"])
ips_to_ssh = get_all_ips(ec2_list=running_instances, key=tag_key["hosts"], value=tag_value["hosts"])

home_dir = Path.home()
ssh_dir = home_dir / ".ssh"
ssh_keys = []
for ssh_key in ssh_dir.iterdir():
    test_file = run(args=f"file {ssh_key.__str__()}", shell=True, capture_output=True)
    if test_file.stdout.endswith(b"private key\n"):
        ssh_keys.append(ssh_key.__str__())

sorted_ssh_keys = sorted(ssh_keys)
ssh_questions = [
    inquirer.List(
        "bastion_name",
        message="Which bastion should I proxy through?",
        choices=sorted(bastions.keys())
    ),
    inquirer.List(
        "bastion_ssh_key",
        message="Which private key should I use for the bastion host?",
        choices=sorted_ssh_keys
    ),
    inquirer.List(
        "bastion_user",
        message="Which ssh user should I user for the bastion host?",
        choices=known_ssh_users
    ),
    inquirer.List(
        "ssh_key",
        message="Which private key should I use for the hosts?",
        choices=sorted_ssh_keys
    ),
    inquirer.List(
        "user",
        message="Which ssh user should I use for the hosts?",
        choices=known_ssh_users
    )
]

ssh_params = inquirer.prompt(ssh_questions)
proxy_command = " ".join([
    "ssh",
    "-i",
    ssh_params['bastion_ssh_key'],
    f"{ssh_params['bastion_user']}@{bastions[ssh_params['bastion_name']]}",
    "-W %h:%p"
])
tmux_cssh_command = " ".join([
    "tmux-cssh",
    "-u",
    ssh_params["user"],
    "-i",
    ssh_params["ssh_key"],
    "-sa",
    f"\"-o ProxyCommand='{proxy_command}'\""
])
run(
    args=f"{tmux_cssh_command} {' '.join(ips_to_ssh)}",
    shell=True
)
